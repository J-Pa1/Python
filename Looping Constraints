# code for checking whether number is prime or not

x = input("Enter a number") # reading input from user and storing it into variable x
x = int(x) # converting x into integer
flag = 0 # intializing flag to 0, for further usage
for i in range(2,x): # iterating i through range 2 to value of x(except x)
  if(x%i==0): # if x is divisible by i, then
    flag=1 # flag is initailized to 1 so that we can identify it is not a prime
if(flag == 1): # checking flag value to 1 to know whether the number is prime or not
  print("Not prime") # prints not prime because it is divisble by a number proven by provided flag value
else:
  print("Prime") # prints prime becuase it is not divisble by any number proven by provided flag value

# code for printing first 100 prime numbers as output. (the above procedure is passed through a loop by giving values to x)

print("Prime numbers between 1 to 100 are :") # output purpose general statement
flag = 0 # intializing flag
for i in range (2,100): # iterating i through all values from 2 to 100(execpt 100)
 for j in range (2,i): # iterating j through all values from 2 to i(execept i)
  if(i%j==0): # checking the divisibilty condition,
   flag = 1 # if divisible, flag will be 1. This is made to identify the divisibilty conditon
 if (flag == 0): # if flag is still 0, indicates that the number gets divisible by no number, which means a prime
   print(i) # prints the number(prime)
 flag = 0 # sets back flag to 0 for next iteration of i
 
# code for fibonacci series

n = input("Enter length of fibonacci series") # taking length of the series as user input, generally 2 or above 2 and storing it in variable n
n = int(n) # converting n into integer
a = [] # creating a empty list
a.append(1) # assigning first value of fibonacci series 1 to a
a.append(2) # assigning second value of fibonacci series 2 to a
for i in range (2,n): # iterating i through range 2(first 2 have already entered) and n(but not n) to get n values
 a.append(a[-1]+a[-2]) # adding the last 2 values and the result is getting added to the list as new element
print(a) # prints the list of fibonacci series of length n

# code for transpose of a matrix

a = [[1,2,3,0],[4,5,6,0],[7,8,9,0]] # assuming a to be the matrix
b = [] # creating an empty list which in return turns to be the transpose matrix
c = [] # creating an empty list which in return helps in building transpose matrix
print("Let Matrix be ") # general print statement for understanding 
for i in range (0,len(a)): # iterating i through range 0 and length of a, here 3, ie. 0 1 2
 print(a[i]) # prints each row
for i in range (0,len(a[0])): # iterating i through range 0 and length of a[0], here 4 which is no of columns of a, ie. 0 1 2 3
 for j in range (0,len(a)): # iterating j through range 0 to length of a, here 3 which is no of rows of a, ie. 0 1 2
  c.append(a[j][i]) # creating a mini list which stores each row of transpose
 b.append(c) # creating main transpose matrix by adding row c
 c = [] # reseting the mini matrix to empty list for next iteration
print("Transpose matrix is ") # general output statement
for i in range (0,len(b)): # iterating i through range 0 and length of b( can also be a[0] ) which is no of rows of b or no of columns of a
 print(b[i]) # printing each row of b, the formed transpose matrix

# multiplication of matrix

x = [[1,2,3],[4,5,6],[7,8,9]] # assigning values to matrix x
print("Let first matrix be ",x) # printing matrix x
y = [[1,4,7],[2,5,8],[3,6,9]] # assigning values to matrix y
print("Let second matrix be ",y) # printing matrix y
# make sure no.of columns of x is equal to no.of rows of y. Only then multiplication is possible. Technically len(x[0]) = len(y)
a = [] # creating an empty matrix used to build multiplied matrix
z = [] # creating an empty matrix to build result
# now we try to create a empty matrix z, which is the resultant matrix of no.of rows equal to that of x and no.of columns equal to that of y
for i in range(len(y[0])): # iterating i through range 0 to length of y[0] which means no.of columns of y, resultant no.of columns. here 3
  a.append(int(0)) # inserting 0 to list a 
for i in range(len(x)): # iterating i through range 0 to length of x, which means no.of rows of x, resultant no.of rows. here 3
  z.append(a.copy()) # adding the list of 0s made by a to z
# note a.copy() should be used instead of a because, if we use z.append(a) same memory location is created 3 times. This results in such a way that any change in one of the 3 rows effects all 3 rows. So copy must be used to avoid reference.
print("z", z) # prints matrix z (contains all 0s)
for i in range(len(x)): # iterates i through range 0 to length of x, no.of rows of x
   for j in range(len(y[0])): # iterates j through range 0 to length y[0], no.of columns of y
     for k in range(len(x[0])): # iterates k through range 0 to length of x[0] or length of y. This loop is an intermediate loop
       z[i][j] += x[i][k] * y[k][j] # z[i][j] gets added the above no.of times with the product (this is how mulptication of matrix works)
print(z) #prints resultant matrix

# sum of series 1,1/2,1/3..1/n

n = input("Enter n value") # reading user input and storing it in n
n=int(n) # converting it into int
sum = 0 # intializing sum to 0
for i in range (1,n+1): # iterating i through 1 to n+1(but not n+1), here 1,2,3...n
  sum = sum + 1/i # sum is getting added by 1/i and again gets updated
print("Your sum is ",sum) # printing resultant sum

x = [1,4,6] # intialzing x
y = [5,2,3] # intialzing y
x.extend(y) # merging the list, here [1,4,6,5,2,3]
x.sort() # sorting the list,here [1,2,3,4,5,6]

# bubble sort (finding 2nd largest element)

x = [5,6,1,3,2,4] # intializing x
print("Let list be ",x) # printing list
for i in range(len(x)): # iterating i through 0 to length of x
  for j in range(i): # iterating j through 0 to i
    if(x[i]<x[j]): # checking condition whether x[i]<x[j]
      x[i],x[j] = x[j],x[i] # if above condtion is true x[i] and x[j] gets swapped
print("Second largest value is ",x[-2]) # prints 2nd element from the last

# A Python Program to Sort a List According to the Length of the Elements

x = ['ab','abc','a'] # assigning values to x
print("Let list be ",x) # printing list x
x = sorted(x,key=len) # sorted function in general sorts the list. But key is an attribute in which we enter function name which gets applied on every element in the list and then list get sorted based on output of that function
print("Length wise sorted list is ",x) # printing sorted list

# Code for cumulative sum

x = [1,2,3,4,5] # assigning values to x
print("Let the list be ",x) # printing x
y = [] # creating an empty list for result
for i in range(1,len(x)+1): # iterating through range 1 to len(x)+1, here from 1,2,3,4,5
  sum = 0 # initializing sum to 0
  for j in range(0,i): # iterating j in range 0 to i
   sum = sum + x[j] # adding x[j] to sum and updating it to sum
  y.append(int(sum)) # after getting out of the loop, we add element to the resultant list
print("Result list is ",y) # printing cumulative sum list

# Simple tuple formation using 2 lists. Tuple of a number and its square

n = input("Number of tuples") # reading user input and initializing it to n
n = int(n) # converting n into integer
x = [] # creating a empty list x for number
y = [] # creating a empty list y for its square
for i in range(1,n+1): # iterating i through 1 and n+1
  x.append(i) # adding i as element in list x
  y.append(i**2)# adding square of i as element in list y
t = () # creating an empty tuple
t = tuple(zip(x,y)) # a tuple is created by using 2 lists x and y using zip function which is used to a kind of join them or merge them
print("Tuple is ",t) # printing tuple

# A python program to build a dictionary with keys as unique list values, values as number of times key is repeating in list.

x = [1,2,3,2,3,4] # assinging values to x
print("Let list be ",x) # printing x
y = [] # creating a empty list for finding unique values of x
for i in range(0,len(x)): # iterating through 0 to length of x
  if (x[i] not in y): # checks whether x[i] is already in y or not because we are trying add only unique values of x in y
    y.append(x[i]) # if x[i] not in y then x[i] gets added to list y
a = [] # creating a empty list a which holds count of each unique value
for i in range(0,len(y)): # iterating through range 0 to length of y
  a.append(x.count(y[i])) # adding element to list a, element added is count of y[i] in list x
d = dict(zip(y,a)) # a dictionary is created by using 2 lists x and y using zip function which is used to a kind of join them or merge them
print(d) # printing resultant dictionary
